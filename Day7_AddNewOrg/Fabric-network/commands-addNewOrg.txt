############## host terminal ##############

======== Create docker-compose file for new org and run it ========

docker-compose -f docker/docker-compose-ca-org3.yaml up -d

======== Register and enroll the users for org3 ========

sudo chmod -R 777 organizations/fabric-ca/org3

///// Create the registerEnrollOrg3.sh file and add the commands

chmod +x registerEnrollOrg3.sh

./registerEnrollOrg3.sh

mkdir configOrg3

///Within the configOrg3 folder create the configtx.yaml and add the configuration of Org3

export FABRIC_CFG_PATH=$PWD/configOrg3

configtxgen -printOrg Org3MSP > organizations/peerOrganizations/org3.example.com/org3.json

======== Bring up Org3 components ========

/// Create docker-compose-org3.yaml file within docker folder

docker-compose -f docker/docker-compose-org3.yaml up -d

======== Fetch the latest config block ========

############## peer0_Org1 terminal ##############

peer channel fetch config config_block.pb -o orderer.example.com:7050 --tls --cafile $ORDERER_TLS_CA -c $CHANNEL_NAME

======== Convert the Configuration to JSON and Trim It Down ========

configtxlator proto_decode --input config_block.pb --type common.Block --output config_block.json

jq .data.data[0].payload.data.config config_block.json > config.json

======== Add the Org3 Crypto Material ========

jq -s '.[0] * {"channel_group":{"groups":{"Application":{"groups": {"Org3MSP":.[1]}}}}}' config.json organizations/peerOrganizations/org3.example.com/org3.json > modified_config.json

configtxlator proto_encode --input config.json --type common.Config --output config.pb

configtxlator proto_encode --input modified_config.json --type common.Config --output modified_config.pb

configtxlator compute_update --channel_id $CHANNEL_NAME --original config.pb --updated modified_config.pb --output org3_update.pb

configtxlator proto_decode --input org3_update.pb --type common.ConfigUpdate --output org3_update.json

echo '{"payload":{"header":{"channel_header":{"channel_id":"'$CHANNEL_NAME'", "type":2}},"data":{"config_update":'$(cat org3_update.json)'}}}' | jq . > org3_update_in_envelope.json

configtxlator proto_encode --input org3_update_in_envelope.json --type common.Envelope --output org3_update_in_envelope.pb

======== Sign and Submit the Config Update ========

peer channel signconfigtx -f org3_update_in_envelope.pb

############## peer0_Org2 terminal ##############

peer channel update -f org3_update_in_envelope.pb -c $CHANNEL_NAME -o orderer.example.com:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $ORDERER_TLS_CA

======== Join Org3 to the Channel ========

/////Open another terminal with in Fabric-network folder, let's call this terminal as peer0_Org3 terminal.

############## peer0_Org3 terminal ##############

docker exec -it cli bash

export CHANNEL_NAME=mychannel 

export CORE_PEER_LOCALMSPID=Org3MSP

export CORE_PEER_ADDRESS=peer0.org3.example.com:11051 

export CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/organizations/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/server.crt 

export CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/organizations/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/server.key 

export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/organizations/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt

export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/organizations/peerOrganizations/org3.example.com/users/Admin@org3.example.com/msp

peer channel fetch 0 $CHANNEL_NAME.block -o orderer.example.com:7050 --ordererTLSHostnameOverride orderer.example.com -c $CHANNEL_NAME --tls --cafile $ORDERER_TLS_CA

peer channel join -b $CHANNEL_NAME.block

peer channel list

======== Install, approve and invoke chaincode ========

peer lifecycle chaincode install fabcar.tar.gz

peer lifecycle chaincode queryinstalled

////// Execute the following command with the correct Package ID
export PACKAGE_ID=fabcar_1:bc2bf6f4b97179c11f093bf6b74fdd85701a57ac3a822e9202f4a1c401f0ea35

peer lifecycle chaincode approveformyorg --channelID ${CHANNEL_NAME} --name fabcar --version 1 --sequence 1  --package-id $PACKAGE_ID  --tls --cafile $ORDERER_TLS_CA  --waitForEvent

peer lifecycle chaincode querycommitted --channelID ${CHANNEL_NAME} --name fabcar

peer chaincode invoke -o orderer.example.com:7050  --tls --cafile $ORDERER_TLS_CA --channelID ${CHANNEL_NAME} --name fabcar --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt  --peerAddresses peer0.org3.example.com:11051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/organizations/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt -c '{"function":"createCar", "Args":["CAR105","Tata","Tiago","White","Alice"]}'

peer chaincode query -o orderer.example.com:7050  --tls --cafile $ORDERER_TLS_CA --channelID ${CHANNEL_NAME} --name fabcar --peerAddresses $CORE_PEER_ADDRESS --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE -c '{"function":"queryCar", "Args":["CAR105"]}'


